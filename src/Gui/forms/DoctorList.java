/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Gui.forms;

import BL.DoctorView;
import DAL.model.Doctor;
import Main.Utilities.Utils;
import static Main.Utilities.Utils.resetForm;
import java.awt.Font;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Drazen Dragovic
 */
public class DoctorList extends javax.swing.JPanel {

    private static final DoctorView DOCTOR_VIEW = new DoctorView();
    private TableRowSorter<DefaultTableModel> docSorter;
    private int id;

    /**
     * Creates new form DoctorList
     */
    public DoctorList() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpDocListMain = new javax.swing.JPanel();
        jpDocList = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtDoctors = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jtfSearch = new javax.swing.JTextField();
        btnDocDetails = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(1080, 620));
        setMinimumSize(new java.awt.Dimension(1080, 620));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1080, 620));

        jpDocListMain.setMaximumSize(new java.awt.Dimension(1080, 600));
        jpDocListMain.setMinimumSize(new java.awt.Dimension(1080, 600));
        jpDocListMain.setOpaque(false);
        jpDocListMain.setLayout(new java.awt.BorderLayout(10, 0));

        jpDocList.setMaximumSize(new java.awt.Dimension(630, 600));
        jpDocList.setMinimumSize(new java.awt.Dimension(630, 600));
        jpDocList.setOpaque(false);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Doctor List", javax.swing.border.TitledBorder.LEADING, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 20), new java.awt.Color(0, 51, 102))); // NOI18N
        jPanel2.setForeground(new java.awt.Color(0, 51, 102));
        jPanel2.setOpaque(false);

        jtDoctors.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        jtDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtDoctors.setEditingColumn(0);
        jtDoctors.setEditingRow(0);
        jtDoctors.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jtDoctors);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Calibri", 1, 16), new java.awt.Color(0, 51, 102))); // NOI18N
        jPanel4.setMaximumSize(new java.awt.Dimension(395, 65));
        jPanel4.setMinimumSize(new java.awt.Dimension(395, 65));
        jPanel4.setOpaque(false);

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 102));
        jLabel1.setText("Doctor ID:");

        jtfSearch.setMaximumSize(new java.awt.Dimension(180, 30));
        jtfSearch.setMinimumSize(new java.awt.Dimension(180, 30));
        jtfSearch.setPreferredSize(new java.awt.Dimension(180, 30));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jtfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        btnDocDetails.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Gui/images/attach_icon.png"))); // NOI18N
        btnDocDetails.setLabel("Details");
        btnDocDetails.setPreferredSize(new java.awt.Dimension(100, 40));
        btnDocDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDocDetailsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnDocDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1002, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(btnDocDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout jpDocListLayout = new javax.swing.GroupLayout(jpDocList);
        jpDocList.setLayout(jpDocListLayout);
        jpDocListLayout.setHorizontalGroup(
            jpDocListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpDocListLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jpDocListLayout.setVerticalGroup(
            jpDocListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDocListLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jpDocListMain.add(jpDocList, java.awt.BorderLayout.LINE_START);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1080, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jpDocListMain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1080, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 620, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jpDocListMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        getAccessibleContext().setAccessibleName("pnDocPatList");
    }// </editor-fold>//GEN-END:initComponents

    private void btnDocDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDocDetailsActionPerformed
        JPanel main = (JPanel) this.getParent();
        DoctorDetails dd = (DoctorDetails) Utils.getPanelByName(main, "DoctorDetails");
        this.setVisible(false);
        dd.setVisible(true);
        dd.loadDoctorById(id);
        dd.loadList(id);
    }//GEN-LAST:event_btnDocDetailsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDocDetails;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jpDocList;
    private javax.swing.JPanel jpDocListMain;
    private javax.swing.JTable jtDoctors;
    private javax.swing.JTextField jtfSearch;
    // End of variables declaration//GEN-END:variables

    private void init() {
        loadDoctrors();
        addDocuListener();
        addTableSelectListener();
    }

    private void addTableSelectListener() {
        jtDoctors.getSelectionModel().addListSelectionListener(
                new ListSelectionListener() {
                    public void valueChanged(ListSelectionEvent event) {
                        int viewRow = jtDoctors.getSelectedRow();
                        if (viewRow < 0) {
                            return;
                        } else {
                            int modelRow = jtDoctors.convertRowIndexToModel(viewRow);
                            id = (Integer) jtDoctors.getModel().getValueAt(modelRow, 0);
                        }
                    }
                }
        );
    }

    private void addDocuListener() {
        jtfSearch.getDocument().addDocumentListener(
                new DocumentListener() {
                    public void changedUpdate(DocumentEvent e) {
                        newFilter();
                    }
                    
                    public void insertUpdate(DocumentEvent e) {
                        newFilter();
                    }
                    
                    public void removeUpdate(DocumentEvent e) {
                        newFilter();
                    }
                    
                    private void newFilter() {
                        RowFilter<DefaultTableModel, Object> rf = null;
                        try {
                            rf = RowFilter.regexFilter(jtfSearch.getText(), 0);
                        } catch (java.util.regex.PatternSyntaxException e) {
                            return;
                        }
                        docSorter.setRowFilter(rf);
                    }
                });
    }

    DefaultTableModel dtm = new DefaultTableModel();

    private void loadDoctrors() {

        List<Doctor> doctors = DOCTOR_VIEW.getAllDoctors();

        dtm.setColumnIdentifiers(Doctor.doctorColumns());

        for (int i = 0; i < doctors.size(); i++) {

            Object[] row = new Object[Doctor.doctorColumns().length];
            row[0] = doctors.get(i).getiDDoctor();
            row[1] = doctors.get(i).getFirstName();
            row[2] = doctors.get(i).getMiddleName();
            row[3] = doctors.get(i).getSurname();
            row[4] = doctors.get(i).getDegree();
            row[5] = doctors.get(i).getSpec();
            dtm.addRow(row);
        }

        docSorter = new TableRowSorter<DefaultTableModel>(dtm);

        jtDoctors.setModel(dtm);
        jtDoctors.getTableHeader().setFont(new Font("Calibri", Font.BOLD, 14));
        jtDoctors.setRowHeight(20);
        jtDoctors.setRowSorter(docSorter);
        jtDoctors.setDefaultEditor(Object.class, null);

        dtm.addTableModelListener((TableModelEvent tme) -> {
            DefaultTableModel tm = (DefaultTableModel) tme.getSource();
        });
    }

    public void reset() {
        resetForm(jpDocList);
        jtfSearch.setText("");
        ListSelectionModel select = jtDoctors.getSelectionModel();
        select.setSelectionInterval(0, 0);
        select.setSelectionMode(0);
    }
}
